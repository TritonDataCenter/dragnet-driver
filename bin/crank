#!/usr/bin/env node
/* vim: set syn=javascript: */

var mod_assert = require('assert');
var mod_bunyan = require('bunyan');
var mod_child = require('child_process');
var mod_fs = require('fs');
var mod_lstream = require('lstream');
var mod_getopt = require('posix-getopt');
var mod_jsprim = require('jsprim');
var mod_manta = require('manta');
var mod_path = require('path');
var mod_vasync = require('vasync');

var format = require('util').format;
var strsplit = require('strsplit');
var VError = require('verror');

var cArg0 = mod_path.basename(process.argv[1]);
var cIndexes = {};
var cWork = [];
var cLog;
var cManta;
var cDaysBack = 7;
var cJobConcurrency = 3;

function main()
{
	var option, parser, indexname;
	var dryrun, noconfirm, v;

	parser = new mod_getopt.BasicParser(
	    'c:(concurrency)d:(days-back)f(skip-confirm)n(dry-run)',
	    process.argv);
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
		case 'c':
			v = parseInt(option.optarg, 10);
			if (isNaN(v) || v <= 0)
				fatal(new VError(
				    'argument for -c is invalid: "%s"',
				    option.optarg));
			cJobConcurrency = v;
			break;

		case 'd':
			v = parseInt(option.optarg, 10);
			if (isNaN(v) || v <= 0)
				fatal(new VError(
				    'argument for -d is invalid: "%s"',
				    option.optarg));
			cDaysBack = v;
			break;

		case 'f':
			noconfirm = true;
			break;

		case 'n':
			dryrun = true;
			break;

		default:
			/* error message already emitted */
			mod_assert.equal('?', option.option);
			usage();
			break;
		}
	}

	if (parser.optind() < process.argv.length) {
		if (parser.optind() > process.argv.length) {
			console.error('%s: extra arguments', cArg0);
			usage();
		}

		indexname = process.argv[parser.optind()];
	} else {
		console.error('%s: missing DATASOURCE_NAME', cArg0);
		usage();
	}

	cLog = new mod_bunyan({ 'name': cArg0 });
	cManta = mod_manta.createBinClient({
	    'log': cLog.child({ 'component': 'manta' })
	});
	/* Bad, manta client! */
	process.removeAllListeners('uncaughtException');

	crank({
	    'dryrun': dryrun,
	    'noconfirm': noconfirm,
	    'indexname': indexname
	});
}

function crank(args)
{
	var dryrun, noconfirm, indexname;

	dryrun = args.dryrun;
	noconfirm = args.noconfirm;
	indexname = args.indexname;

	mod_vasync.waterfall([
	    function doFetchIndexConfig(callback) {
		checkIndex(indexname, callback);
	    },

	    function compileWork(callback) {
		for (var idx in cIndexes)
			idxCompileWork(idx, cIndexes[idx]);
		callback();
	    },

	    function doConfirm(callback) {
		console.error('Commands to execute:');
		doAllWork(true, function () {
			if (dryrun || noconfirm) {
				callback(null, true);
				if (dryrun)
					console.error('Leave off ' +
					    '-n/--dry-run to execute');
				return;
			}

			confirm('Do you want to run these jobs? (y/n) ',
			    function (result) { callback(null, result); });
		});
	    },

	    function doWork(proceed, callback) {
		if (!proceed || dryrun) {
			setImmediate(callback);
			return;
		}

		doAllWork(dryrun, callback);
	    }
	], function (err) {
		if (err)
			fatal(err);
		cManta.close();
	});
}

function fatal(err)
{
	console.error('%s: %s', cArg0, err.message);
	process.exit(1);
}

function usage()
{
	console.error('usage: %s [-c concurrency] [-d days_back] [-fn] ' +
	    'DATASOURCE_NAME', cArg0);
	process.exit(2);
}

function confirm(msg, callback)
{
	var answer = '';
	process.stdout.write(msg);
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.setRawMode(true);
	process.stdin.on('data', function listener(ch) {
		ch = ch + '';

		switch (ch) {
		case '\n':
		case '\r':
		case '\u0004':
		        /* end of input line */
		        process.stdin.setRawMode(false);
		        process.stdin.pause();
		        process.stdin.write('\n');
			process.stdin.removeListener('data', listener);
		        callback(answer == 'y');
		        break;

		case '\u0003':
		        /* Ctrl-C */
		        process.stdin.setRawMode(false);
		        process.stdin.pause();
			process.stdout.write('\n');
			process.stdin.removeListener('data', listener);
		        callback(false);
		        break;

		default:
		        process.stdout.write(ch);
		        answer += ch;
		        break;
		}
	});
}

function checkIndex(dsname, callback)
{
	var idx;

	mod_vasync.waterfall([
	    function getDatasourceConfig(stepcb) {
		var execoptions = {
		    'timeout': 10000,
		    'killSignal': 'SIGKILL'

		};
		mod_child.execFile('dn', [ 'datasource-show', '-v', dsname ],
		    execoptions, function (error, stdout, stderr) {
			var err;

			if (error) {
				if (error.signal) {
					err = new VError(error,
					    'terminated by signal "%s"',
					    error.signal);
				} else if (typeof (error.code) == 'number') {
					err = new VError(error,
					    'command exited with code "%s"',
					    error.code);
				} else {
					err = new VError(error, 'exec failed');
				}

				err = new VError(err, 'failed to fetch ' +
				    'config for datasource "%s"', dsname);
				stepcb(err);
				return;
			}

			var lines, source, cfg, parts;

			lines = stdout.split('\n');
			lines.forEach(function (line) {
				if (line.trim().length === 0) {
					return;
				}

				if (line.charAt(0) !== ' ') {
					source = line.split(/\s+/)[0];
					if (source == dsname)
						cfg = {};
					return;
				}

				if (source != dsname) {
					return;
				}

				parts = strsplit(line, /\s*:\s+/, 2);
				if (parts.length != 2)
					return;

				cfg[parts[0].trim()] = parts[1].trim();
			});

			if (cfg === undefined || cfg.indexPath === undefined) {
				stepcb(new VError('did not find datasource ' +
				    'indexPath'));
				return;
			}

			/*
			 * Strip the surrounding quotation marks from the path.
			 * XXX This is the point at which it's clear that we
			 * shouldn't be parsing the human-readable output of "dn
			 * datasource-show -v".
			 */
			cfg.indexPath = cfg.indexPath.substr(1,
			    cfg.indexPath.length - 2);

			idx = cIndexes[dsname] = {
			    'i_dsname': dsname,
			    'i_conf': cfg,
			    'i_found': {},
			    'i_missing': []
			};
			stepcb();
		    });
	    },

	    function listIndexRoot(stepcb) {
		var rpath = mod_path.join(idx.i_conf.indexPath, 'by_day');
		cManta.ftw(rpath, function (err, emitter) {
			if (err) {
				/* Work around node-manta#198 */
				if (!err.message)
					err.message = err.name;
				stepcb(err);
				return;
			}

			emitter.on('entry', function (obj) {
				idx.i_found[obj.name] = true;
			});

			emitter.on('end', function () { stepcb(); });
		});
	    },

	    function findMissing(stepcb) {
		idxFindMissing(idx);
		stepcb();
	    }
	], function (err) {
		callback(err);
	});
}

function idxFindMissing(idx)
{
	var daysback, time, name, i;

	daysback = cDaysBack;
	time = new Date();
	time.setUTCHours(0, 0, 0, 0);

	for (i = 0; i < daysback; i++) {
		time.setUTCDate(time.getUTCDate() - 1);
		name = time.toISOString().substr(0, 10) + '.sqlite';
		if (!idx.i_found.hasOwnProperty(name)) {
			idx.i_missing.push({
			    'name': name,
			    'start': new Date(time.getTime())
			});
		}
	}
}

function idxCompileWork(idxname, idx)
{
	console.error('index "%s": %d missing index%s',
	    idxname, idx.i_missing.length,
	    idx.i_missing.length == 1 ? '' : 'es');
	idx.i_missing.forEach(function (missing) {
		cWork.push({
		    'w_idxname': idxname,
		    'w_idx': idx,
		    'w_name': missing.name,
		    'w_start': missing.start,
		    'w_cmd': idxWorkCommand(idx, missing)
		});
	});
}

function idxWorkCommand(idx, missing)
{
	var end, rv;

	end = new Date(missing.start.getTime());
	end.setUTCDate(end.getUTCDate() + 1);
	rv = [ 'dn', 'build', idx.i_dsname,
	    format('--after=%s', missing.start.toISOString()),
	    format('--before=%s', end.toISOString()) ];
	return (rv);
}

function doAllWork(dryrun, callback)
{
	var concurrency, worker, queue, errors;

	concurrency = dryrun ? 1 : cJobConcurrency;
	worker = function (w, queuecb) {
		doOneJob(dryrun, w, function (err) {
			if (err)
				errors.push(err);
			queuecb();
		});
	};
	queue = mod_vasync.queue(worker, concurrency);
	errors = [];
	queue.on('end', function () {
		if (errors.length > 0)
			callback(errors[0]);
		else
			callback();
	});

	cWork.forEach(function (w) { queue.push(w); });
	queue.close();
}

function doOneJob(dryrun, workinfo, callback)
{
	var p, l, stderr, jobid;

	if (dryrun) {
		console.log('    $ ' + workinfo.w_cmd.join(' '));
		setImmediate(callback);
		return;
	}

	p = mod_child.spawn(workinfo.w_cmd[0],
	    workinfo.w_cmd.slice(1), {
	        'stdio': [ 'ignore', 'ignore', 'pipe' ]
	    });

	p.on('error', function (err) {
		callback(new VError(err, 'spawn "%s"',
		    workinfo.w_cmd.join(' ')));
	});

	stderr = '';
	l = new mod_lstream();
	p.stderr.pipe(l);
	l.on('data', function onData(line) {
		var match;

		/* JSSTYLED */
		match = /submitted job (.*)/.exec(line);
		if (match !== null) {
			jobid = match[1];
			console.error('index "%s" date "%s": %s',
			    workinfo.w_idxname, workinfo.w_name,
			    jobid);
		}

		stderr += line + '\n';
	});

	p.on('exit', function (code, signal) {
		var reason, str;
		if (code !== 0) {
			reason = code === null ? 'signal ' + signal :
			    'exited with status ' + code;
			str = format('job "%s" failed (%s)',
			    jobid ? jobid : '(unknown)', reason);
			console.error(str);
			console.error('stderr:');
			process.stderr.write(stderr);
			callback(new VError(str));
		} else {
			callback();
		}
	});
}

main();
